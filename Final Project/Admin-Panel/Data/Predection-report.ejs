<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f3f3f3;
            margin: 0;
            padding: 0;
        }
        .nav1{

background-color: rgb(235, 222, 222);

width: 100%;

margin: 20px 0px;
display: flex;
justify-content: center;
align-items: center;
justify-content: space-around;
text-decoration: none;
}
.nav-left-1 a{
font-family: 'Dancing Script', cursive;
font-weight: bold;
text-decoration: none;
color: rgb(243, 237, 237);

font-size: 35px;
}

.nav-left a{
font-weight: bold;
color: rgb(142, 139, 139);
text-decoration: none;
font-size: 30px;
}
.nav-left a:hover {
font-weight: bold;
color: rgb(84, 78, 78);
text-decoration: none;
font-size: 30px;
}
        .container {
            width: 96%;
            margin: 20px auto;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #333333;
        }

        .search-form {
            width: 90%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-direction: column; /* To stack form elements vertically */
          text-align: center; /* Center-align form elements */
        }

        .search-form label {
            font-weight: bold;
        }

        .search-form input[type="text"],
        .search-form select {
            padding: 8px;
            border: 1px solid #cccccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .search-form input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 20px;
            cursor: pointer;
        }

        .panel {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .new-product-btn {
        
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 20px;
            cursor: pointer;
            position:relative; left:70%; top:2px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        table, th, td {
            border: 1px solid #cccccc;
            padding: 6px;
           
            max-width: 97%;
        }

        th {
            width: 80%;
            background-color: #f2f2f2;
        }
        td, th {
            
            text-align: center;
            align-items: center;
            
        }

        td a {
            
            color: #4CAF50;
            text-decoration: none;
            font-size: 15px;
            font-weight: bold;
        }

        td a:hover {
            color: #175019;
        }
        
    </style>
</head>
<body>
    <div class="nav1">
        <div class="nav-left"><a href="/Dash_Board_panel.html">Desh Board</a></div>
        <div class="nav-left"><a href="/data-entry/create_id_home.html">Home</a></div>
        

     

    </div>
    <div class="container">
        <button class="new-product-btn" onclick="location.href='product-entry.html'">New Product Entry</button>
        <button class="new-product-btn" onclick="location.href='panel-entry'">Product Entry</button>
        <h2>Product</h2>
        <div class="search-form">
            <form action="/product-search" method="GET">
    
                <input type="text" id="idSearch" placeholder="Search by ID...">
                <input type="text" id="medicineSearch" placeholder="Search by Medicine...">
                <input type="text" id="companySearch" placeholder="Search by Company...">
                <!-- <select id="seasonType">
                    <option value="">Select Season...</option>
                    <option value="Winter Flu Season">Winter Flu Season</option>
                    <option value="Monsoon Season">Monsoon Season</option>
                    <option value="Spring Allergies">Spring Allergies</option>
                    <option value="Summer Allergies">Summer Allergies</option>
                    <option value="Fall Allergies">Fall Allergies</option>
                    <option value="Boro Harvest">Boro Harvest</option>
                    <option value="Aman Harvest">Aman Harvest</option>
                    <option value="Aus Harvest">Aus Harvest</option>
                    <option value="Winter Allergies">Winter Allergies</option>
                    <option value="Pre-monsoon Season">Pre-monsoon Season</option>
                    <option value="Post-monsoon Season">Post-monsoon Season</option>
                </select>  -->

                <input type="submit" value="Search">
            </form>
        </div>
    
     <table id="searchResults">
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>weight</th>
            <th>Company</th>
            <th>Last Year Sales</th>
            <th>Last Season Sales</th>
            <th>This Year Sales</th>
            <th>This Season Sales</th>
            <th>Last Day Sales</th>
            <th>This Week All Sales</th>
            <th>This Month All Sales</th>
            <th>Last Production Quantity</th>
            <th>Physical Stock</th>
            <th>Production Prediction</th>
            <th>Production Quantity</th>
        </tr>
        <% 
        // Initialize an empty object to store grouped data
        const groupedData = {};
    
        // Iterate through the data to group rows by product_id
        production_prediction_database_backup.forEach(item => {
            if (!groupedData[item.product_id]) {
                // If product_id is not in groupedData, initialize it with the current item
                groupedData[item.product_id] = { ...item };
            } else {
                // If product_id already exists, sum up specific columns
                groupedData[item.product_id].LastSeasonSales += item.LastSeasonSales;
                groupedData[item.product_id].ThisYearSales += item.ThisYearSales;
                // Add other columns here to sum up
            }
        });
    
        // Iterate through the grouped data to render rows
        Object.keys(groupedData).forEach(productId => { 
            const item = groupedData[productId];
        %>
        <tr>
            <td><%= item.product_id %></td>
            <td><%= item.Name %></td>
            <td><%= item.weight %></td>
            <td><%= item.Company %></td>
            <td><%= item.LastYearSales %></td>
            <td><%= item.LastSeasonSales %></td>
            <td><%= item.ThisYearSales %></td>
            <td><%= item.ThisSeasonSales %></td>
            <td><%= item.LastDaySales %></td>
            <td><%= item.ThisWeekAllSales %></td>
            <td><%= item.ThisMonthAllSales %></td>
            <td><%= item.LastProductionQuantity %></td>
            <td><%= item.PhysicalStock %></td>
            <td><%= item.ProductionPrediction %></td>
            <td><input type="number" id="productionQuantity"></td>
        </tr>
        <% }); %>
    </table>
    </div>

    
</body>
</html>
